{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#ecodynamicsjl","title":"EcoDynamics.jl","text":"<p>EcoDynamics.jl is a package for simulation of ecosystem processes, specifically population and community dynamics on spatial graphs, written in the Julia language. </p> <p>Info</p> <p>Note that EcoDynamics.jl is still under development, and although the API is not expected to change a ton, we still do not yet guarantee it will remain constant until the first <code>v1.0</code> productoin release.</p> <p></p> <p></p>"},{"location":"#installation","title":"Installation","text":"<p>If you need to install Julia, you can do so using the <code>juliaup</code> installation manager with instructions found here. </p> <p>From within Julia, you can install the release with </p> <pre><code>using Pkg\nPkg.add(\"EcoDynamics\")\n</code></pre> <p>Or from the REPL Pkg mode, you can use</p> <pre><code>pkg&gt; add EcoDynamics\n</code></pre> <p></p> <p></p>"},{"location":"#background-and-motivation","title":"Background and Motivation","text":"<ul> <li>so this should justify the major elements that must be includeable in simulation</li> </ul>"},{"location":"#documentation-structure","title":"Documentation Structure","text":"<p>This documentation is structured loosely using the Di\u00e1taxis format, which separates documentation into four forms:</p> <ol> <li>Tutorials (a learning-oriented guided exploration of the software)</li> <li>How-to Guides (a goal-oriented set of directions to accomplish something specific)</li> <li>Reference (information-oriented \"techinical descriptions of the machinery\")</li> <li>Explanation (understanding-oriented discussions on the software design)</li> </ol> <p></p> <p></p>"},{"location":"#tutorials","title":"\ud83d\udc1b Tutorials","text":"<ul> <li>Getting started with <code>EcoDynamics.jl</code></li> <li></li> </ul>"},{"location":"#how-to-guides","title":"\ud83e\udd8b How-to Guides","text":""},{"location":"#reference","title":"\ud83d\udcda Reference","text":""},{"location":"#explanation","title":"\ud83e\uddea Explanation","text":""},{"location":"explanation/design/","title":"Explanation","text":""},{"location":"explanation/design/#the-design-of-ecodynamicsjl","title":"The design of <code>EcoDynamics.jl</code>","text":"<p>This document is for advanced users interested in contributing new models or building complicated custom models in <code>EcoDynamics.jl</code>.</p> <p></p> <p></p>"},{"location":"explanation/design/#the-type-system","title":"The type system","text":"<p>While EcoDynamics enables simulation of dynamics in a single place (locally), its main goal is to enable reaction-diffusion models on spatial graphs. Similarly, although EcoDynamics is perfectly adaquete for simulating the dynamics of single-species systems, the core design goals are motivated by an interest in simulating communities on spatial graphs, where environmental variation across each patch/node in the graph influences the dynamics at that node/patch, with a particular emphasis on understanding how different parameterizations of models causes regime shifts in resulting species  compositions across space, across different levels of neutral, niche, and dispersal proccesses.</p> <p>What are the essential things you need to build a simulation model that meets this criteria?</p> <ol> <li>We need a way to represent different types of models (e.g. Lotka-Volterra, Rosenzweig-MacArthur, etc).</li> <li>A spatial graph, consisting of a set of nodes/patches connected by dispersal, that also can represent environmental information associated with each patch.</li> <li>A species pool with traits, which are an arbitrary set of named values that correspond to each species in the species pool.</li> <li>The niche, where the combination of the local (named!) environmental conditions at a patch and other species present shifts the parameters of the dynamics at that patch.</li> <li>A model of diffusion. We take a dispersal kernel and normalize its value across each (source-&gt;target) pair of patches to create a dispersal potential, which is a distribution for each (source-&gt;target pair).</li> </ol> <p>Note that all are interconnected and must interface with one another to achieve our overall goal:</p> <ul> <li>the model's parameters must match species pool size and number of spatial sites  (1-&gt;2, 1-&gt;3)</li> <li>the spatial graph must provide environmental data for the niche (2 -&gt; 4)</li> <li>the species pool must provide traits for the niche (3-&gt;4)</li> <li>the niche must provide parameters for the spatial version of the model based on the species pool and (spatial graph w/ environment) (2-&gt;1, 4-&gt;1)</li> <li>both the species and environment must provide named parameters to the niche (2-&gt;4,3-&gt;4)</li> </ul> <p></p> <p></p>"},{"location":"explanation/design/#models","title":"Models","text":"<p>The first element of the type system is distinguishing different properties of different <code>Model</code>s. In EcoDynamics.jl, <code>Model</code> is the abstract type under which all concrete model definitions are subtyped. Specifically, <code>Model</code> is defined as a parameteric abstract type where stores information about the important meta-properties about models. </p> <p><code>abstract type Model{SC&lt;:Scale,M&lt;:Measurement,SP&lt;:Spatialness,D&lt;:Discreteness} end</code> </p> <p>Specifically there are four different important properties which <code>Model</code> stores (in Julia development, this design pattern is called using 'traits', although we refrain from using that terminology in this documentation to avoid confusion with <code>Trait</code>s as the type of information that describes properties about species).</p> <p>These four properties are <code>Scale</code>, <code>Measurement</code>, <code>Spatialness</code>, and <code>Discreteness</code>. Each of these are defined as abstract types, and the different values they can take on are defined as abstract types that are subtypes of the category they correspond to.</p> <ol> <li><code>Scale</code> refers to the organizational scale a model is originally designed, with the options being <code>Population</code>, <code>Community</code>, <code>Metapopulation</code>, and <code>Metacommunity</code>. Note that a model being at the <code>Population</code> or <code>Community</code> scale doesn't preclude it from being turned into reaction-diffusion models on spatial graphs, however <code>Metapopulation</code> and <code>Metacommunity</code> models are such that they have no corresponding local version (think Hanksi's metapopulation model).</li> <li><code>Measurement</code> refers to the type of information that is changing over time in a given model. There options here are (1) <code>Occupancy</code>, which indicates binary presence/absence state, (2) <code>Abundance</code>, where each state is a non-negative integer representing the count of individuals and (3) <code>Biomass</code>, where each state is a non-negative real number indicating some relative measure of biomass.</li> <li><code>Discreteness</code> refers to whether a model is defined in <code>Continuous</code> or <code>Discrete</code> time.</li> <li><code>Spatialness</code> refers to whether a constructed model is only occuring at a single location (<code>Local</code>), or whether the model is constructed across a spatial graph (<code>Spatial</code>). This type-parameter is distinct because it can change. The method <code>spatialize</code> transforms a <code>Local</code> model into spatial models.</li> </ol> <p></p> <p></p>"},{"location":"explanation/design/#spatial-graphs","title":"Spatial graphs","text":"<p>The <code>SpatialGraph</code> type contains information about the coordinates of each patch/node, as well as environmental covariates at each site. Environmental covariates are stored in a dictionary where the key is the name of the variable, and the value is a vector of values corresponds to each node in the spatial graph. </p> <p></p> <p></p>"},{"location":"explanation/design/#species-pool","title":"Species Pool","text":"<p>The <code>SpeciesPool</code> type contains a list of species names (as <code>String</code>s or <code>Symbol</code>s), and more importantly a dictionary of named trait values. The trait values are important as they are one of two inputs to a <code>Niche</code>, which enables variation in model parameters across space as a function of  enviornmental conditions.</p> <p></p> <p></p>"},{"location":"explanation/design/#niches","title":"Niches","text":"<ul> <li>Provide a default niche function for each model, but enable it to be written custom. This enables environment-contigent interaction strengths, etc.</li> <li>Generally, the default niche will modify the growth rates in a model by a a function of the distance between a single dimensional environmental variable and a species trait, e.g. adjusting $R_0$ in the SIR model</li> </ul>"},{"location":"explanation/design/#dispatch-patterns","title":"Dispatch patterns","text":"<ul> <li>What is the lifespan of building and running a model?</li> <li>Maybe there is a figure for the paper here, flowchart of what is the next method you run based on what you are trying to do?</li> </ul>"},{"location":"explanation/design/#qa-methods-for-included-models","title":"QA Methods for Included Models","text":"<p>One main design goal of <code>EcoDynamics.jl</code> is to ensure it is as easy as possible to write customs models. \"Easy\", in this sense, means both involving writing the fewest lines of code possible, and not requiring a deep understanding of Julia or its type system. </p> <p>This means that the instructions on how to add custom models (see TBD docs section) doesn't include some of the extra methods added to included models to avoid possible mistakes. E.g.:</p> <ul> <li>Warnings about parameter values that are extreme or nonsensical (providing an intrinsic growth rate to a predator in a LV model, say)</li> <li>Warnings about whether a niche function leads toward \"crucial\" parameters going to 0/unreasonable values at most sites depending on the range of environmnetal variables provided in the SpatialGraph</li> </ul>"},{"location":"reference/internal/","title":"Internal","text":""},{"location":"reference/internal/#documentation-for-internal-methods","title":"Documentation for internal methods","text":""},{"location":"reference/public/","title":"Public","text":""},{"location":"reference/public/#public-methods","title":"Public methods","text":"<ul> <li><code>MetacommunityDynamics.BevertonHolt</code></li> <li><code>MetacommunityDynamics.CompetitiveLotkaVolterra</code></li> <li><code>MetacommunityDynamics.RosenzweigMacArthur</code></li> </ul>"},{"location":"reference/model_index/community/overview/","title":"Overview","text":""},{"location":"reference/model_index/community/overview/#community-dynamics-in-ecodynamicsjl","title":"Community Dynamics in EcoDynamics.jl","text":"<p>The dynamics of ecological communities has a rich history. </p> <p></p> <p></p>"},{"location":"reference/model_index/community/overview/#rosenzweig-macarthur","title":"Rosenzweig-MacArthur","text":"<p># <code>MetacommunityDynamics.RosenzweigMacArthur</code> \u2014 Type.</p> <pre><code>struct RosenzweigMacArthur{S&lt;:Spatialness} &lt;: Model{Community,Biomass,S,Continuous}\n</code></pre> <p>Dynamics given by</p> <p>$\\frac{dR}{dt} = \\lambda R \\bigg(1 - \\frac{R}{K}\\bigg) - \\frac{\\alpha CR}{1 +\\alpha \\eta R}$</p> <p>$\\frac{dC}{dt} = \\beta \\frac{\\alpha CR}{1 + \\alpha \\eta R} - \\gamma   C$</p> <p>source</p> <p></p> <p></p>"},{"location":"reference/model_index/community/overview/#competitive-lotka-volterra","title":"Competitive Lotka-Volterra","text":"<p># <code>MetacommunityDynamics.CompetitiveLotkaVolterra</code> \u2014 Type.</p> <pre><code>CompetitiveLotkaVolterra{S} &lt;: Model{Community,Biomass,S,Continuous}\n</code></pre> <p>Competitive Lotka-Voterra.</p> <p>source</p>"},{"location":"reference/model_index/metapopulation/overview/","title":"Overview","text":""},{"location":"reference/model_index/metapopulation/overview/#metapopulation-dynamics-in-ecodynamicsjl","title":"Metapopulation Dynamics in EcoDynamics.jl","text":"<p>Metapopulation dynamics refers to the set of theory describing the behavior of occupancy dynamics in a set of patches. </p>"},{"location":"reference/model_index/population/overview/","title":"Overview","text":""},{"location":"reference/model_index/population/overview/#population-dynamics-in-ecodynamicsjl","title":"Population Dynamics in EcoDynamics.jl","text":""},{"location":"reference/model_index/population/overview/#beverton-holt","title":"Beverton-Holt","text":"<p># <code>MetacommunityDynamics.BevertonHolt</code> \u2014 Type.</p> <pre><code>BevertonHolt{S} &lt;: Model{Population,Biomass,S,Discrete}\n</code></pre> <p>The Beverton-Holt model is a discrete-time, deterministic model of population dynamics. It is commonly interpreted as a discrete-time version of the logistic model.</p> <p>It is described by </p> <p>$N_{t+1} =\\frac{R_0 M}{N_t + M}N_t$</p> <p>where $K = (R_0 - 1)M$ is the carrying capacity.</p> <p>source</p> <p></p> <p></p>"},{"location":"reference/model_index/population/overview/#logisitic-model","title":"Logisitic Model","text":"<p>Missing docstring.</p> <p>Missing docstring for <code>LogisiticModel</code>. Check Documenter's build log for details.</p>"},{"location":"tutorials/getting_started/","title":"Getting Started","text":""},{"location":"tutorials/getting_started/#getting-started-with-ecodynamicsjl","title":"Getting started with <code>EcoDynamics.jl</code>","text":"<p>Abstract</p> <p>In this tutorial, we will install Julia and <code>EcoDynamics.jl</code>, and create and simulate a simple model of population dynamics.</p> <p>First we'll load the package. </p> <pre><code>using MetacommunityDynamics\n</code></pre> <p><code>@example 1 logistic_map = LogisticMap(r=3.6)</code></p> <p>```</p> <p>@example 1 prob = problem(logistic_map)</p> <pre><code>\n</code></pre> <p>@example 1 traj = simulate(prob)</p> <pre><code>\n</code></pre> <p>@example 1 coords = Coordinates(20)</p> <pre><code>foo\n</code></pre> <p>@example 1 kern = DispersalKernel(decay=5.0, max_distance=0.5)</p> <pre><code>bar\n</code></pre> <p>@example 1 sg = SpatialGraph(coords, kern)</p> <pre><code>foobar\n</code></pre> <p>@example 1 spatiallogmap = spatialize(logisticmap, sg, SpeciesPool(1))</p> <pre><code>baz\n</code></pre> <p>@example 1 diffusion = Diffusion(sg, 0.05)</p> <pre><code>foobarbaz\n</code></pre> <p>@example 1 spatialprob = problem(spatiallogmap, diffusion; u0=[rand() for _ in 1:numsites(sg)])</p> <pre><code>\n</code></pre> <p>@example 1 simulate(spatial_prob) ``` biz</p>"},{"location":"tutorials/quick_start/","title":"Quick start","text":""},{"location":"tutorials/quick_start/#hello-world-in-ecodynamicsjl","title":"Hello World in  <code>EcoDynamics.jl</code>","text":"<p>Abstract</p> <p>This is meant as a quick tutorial to show a typical workflow using EcologicalDynamics.jl. We will introduce many concepts quite quickly in order to show off the features that make <code>EcoDynamics</code> tick. If it feels like the content is moving fast, that's okay. More detailed explanations of the functionality showcased here will follow in subsequent parts of the 'Getting Started' guide.</p> <p>This document is a quick start to the features in <code>EcoDynamics</code>. Here we will build a model of consumer-resource dynamics on a spatial graph, where the limiting growth rate of the resource is a function of the environmental conditions at each patch.</p> <p>First we'll load the package.</p> <p>```@example 1 using EcologicalDynamics <pre><code>For this example, we are going to use one of the many models included in the `EcoDynamics` library. The Rosenzweig-MacArthur [@cite] model of consumer-resource dynamics. Initially, the Rosenzweig-MacArthur was originally defined as  \n\n\n$$\n\\frac{dR}{dt} = \\lambda R \\bigg(1 - \\frac{R}{K}\\bigg) - \\frac{\\alpha CR}{1\n+\\alpha \\eta R}\n$$\n\n\n$$\n\\frac{dC}{dt} = \\beta \\frac{\\alpha CR}{1 + \\alpha \\eta R} - \\gamma   C\n$$\n\n\nwhere $R$ is the relative biomass of the resource, $C$ is the relative biomass of the consumer, $\\alpha$ is the attack-rate, $\\eta$ is the handling type, $\\lambda$ is the limiting instric growth rate,  $\\beta$ is the intrinsic infintesimal growth of biomass for the consumer per unit resource, and $\\gamma$ is the intrinsic death date of consumers. (Note that this is equivalent to a Lotka-Volterra model with a Holling Type-II functional response).\n\n\nBy default, in `EcoDynamics` the `RosenzweigMacArthur` model is parameterized for two species exhibiting a limit cycle, though it can be used for an arbitrary number of species (See *TODO custom parameterization* section). \n\n\n```@example 1\nrosen = RosenzweigMacArthur()\n</code></pre></p> <p>Here we'll consider the folliwing way in which environmental variation affects the dynamics of this model.</p> <p>At each patch $i$ in the spatial graph, the limiting growth rate of the resource at that patch, $\\lambda_i$, is a function of the difference between a given trait for the consumer species $x$, and a single environmental variable associated with each patch, $e_i$. </p> <p>We'll model $\\lambda_i$ as decreasing like a Gaussian as the distance between $e_i$ and $x$ decreases, e.g. </p> <p>$$ \\lambda_i = \\exp{\\bigg(\\frac{-(e_i -x)^2}{\\sigma^2}\\bigg)} $$</p> <p>where $\\sigma$ is a parameter controlling the 'importance' of this trait-environmental matching for consumer growth.</p> <p>We'll first do this by initializing a two-species <code>SpeciesPool</code></p> <p>```@example 1 sp = SpeciesPool(2) <pre><code>Note that by default, `SpeciesPool`s initialized without provided traits default to a single dimensional trait named `:x` uniformally distributed on $[0,1]$. \n\n\nNext, we'll initialize a spatial graph with 20 patches. Note that when not initialized with environmental variable,`SpatialGraph`'s are initialized with a single environmental varaible `:e1`, similarly uniformally drawn from $[0,1]$.\n\n\n```@example 1\nsg = SpatialGraph(Coordinates(20), DispersalKernel(max_distance=0.3))\n</code></pre></p> <p>Now, we provide a function that encodes our model of the niche as described above. Note that a niche function is expected to take a <code>model</code>, <code>traits</code>, and particular patch's environmental condition, and return the modified the parameters for that particular patch.</p> <pre><code>function niche(model, traits, local_env)\n    \u03b8 = paramdict(model)\n    \u03b8[:\u03bb] = [\u03bb\u1d62 &gt; 0 ? \u03bb\u1d62*exp(-(traits[:x][i] - local_env[:e])^2) : 0 for (i,\u03bb\u1d62) in enumerate(\u03b8[:\u03bb])]\n    return \u03b8\nend\n</code></pre> <pre><code>niche (generic function with 1 method)\n</code></pre> <p>Now, we use the <code>spatialize</code> method to combine our <code>Model</code>, <code>SpatialGraph</code>, <code>SpeciesPool</code>, and <code>niche</code>. Note that <code>niche</code> here is a keyword argument. If not provided, by default spatialize will used identical parameters across all sites. This may be of interested if the goal is understanding the consequences of dispersal absent environmental variation.</p> <p>```@example 1 spatialrm = spatialize(rosen, sg, sp; niche=niche) <pre><code>The final thing we need to run this model is our `Diffsion` model. `Diffusion` models are constructed using a few components, first a `DispersalKernel`. The dispersal kernel describes a relative likeliheed of how far an individual organism is going to disperse. By default, the `DispersalKernel`s are initialized with an exponential dispersal kernel, i.e. the kernel $f$ is given by \n\n\n$$\nf(x, \\alpha) = e^{-\\alpha d_{ij}}\n$$\n\n\nwhere $\\alpha$ indicates the strength of decay, i.e. for small $\\alpha$ the organism can disperse far, and vice-versa, and $d_{ij}$ is the distance between patch $i$ and patch $j$.  The `DispersalKernel` also takes an optional `max_distance` argument, which is the furthest any organism can feasibly disperse, meaning for any $d_{ij}$ greater than the `max_distance`, the kernel will be equal to zero. \n\n\nFinally, we can define our `Diffusion` model using a base migration probability and the dispersal potential.\n\n\n```@example 1\nm = 0.01\ndiff = Diffusion(m, sg)\n</code></pre></p> <p>Now, we can finally construct the a <code>Problem</code> using our local dynamics <code>spatialrm</code> model and our diffusion model <code>diff</code>. Initial conditions and timespan can be provided here.</p> <p>```@example 1 prob = problem(spatialrm, diff) <pre><code>and run the model using `simulate`\n\n\n```@example 1\nsimulate(prob)\n</code></pre></p>"},{"location":"tutorials/tutorials/","title":"Tutorials","text":""},{"location":"tutorials/tutorials/#tutorials","title":"Tutorials","text":"<ol> <li> <p>Running Dynamics</p> </li> <li> <p>The logistic map.</p> </li> <li>The <code>model</code>, <code>Problem</code>, <code>simulate</code> API</li> <li>Customization</li> </ol> <p>Meant to be a guide to up to the spatialize API, but only consider results up to aggregated across all sites. For differences in sites, see tutorial tbd.  </p> <ol> <li> <p>Consumer-Resource Models</p> </li> <li> <p>Basic LV</p> </li> <li>Custom functional response</li> <li>YodzisInnes and trait models</li> <li>Many species models</li> <li> <p>Putting it all together</p> </li> <li> <p>Dispersal</p> </li> <li> <p>Spatial Graphs</p> </li> <li>Environmental Covariates</li> <li>Dispersal Kernels and Potentials</li> <li> <p>Diffusion</p> </li> <li> <p>Adding Stochaticity</p> </li> <li> <p>note refering to reference section on how EcoDynamics treats discrete-time determ/stoch models the same</p> </li> </ol> <p>Build up to Gaussian drift to LV many species system on a SG</p> <ol> <li> <p>Letting the environment influence species interactions</p> </li> <li> <p>Assumes previous tutorials</p> </li> <li> <p>strong env gradient from NL.jl</p> </li> <li> <p>Single-species occupancy models</p> </li> <li> <p>Multi-species occupancy models</p> </li> <li> <p>Simulated niche-space, set up generative model used for inference later</p> </li> <li> <p>Inference</p> </li> <li> <p>Bayes integration tutorial</p> </li> </ol>"},{"location":"tutorials/two_species/","title":"A Two Species Model","text":""},{"location":"tutorials/two_species/#a-tutorial-on-consumer-resource-modeling","title":"A tutorial on Consumer-Resource Modeling","text":"<p>Abstract</p> <p>In this tutorial, we explore our first multi-species model: Lotka-Volterra dynamics. We'll learn about building consumer-resource models in <code>EcoDynamics</code>, and using included and custom functional responses.</p> <p>Overview</p> <ul> <li>Basic LV</li> <li>Custom functional response</li> <li>Differential growth in response to environment</li> <li>YodzisInnes and trait models</li> <li>Many species models</li> <li>Putting it all together</li> </ul> <p>First we'll load the package.</p> <pre><code>using MetacommunityDynamics\n</code></pre> <p></p> <p></p>"},{"location":"tutorials/two_species/#an-introduction-to-consumer-resource-models","title":"An introduction to Consumer-Resource models","text":"<p>Lotka-Volterra as a predator-prey model.</p> <p>The unrealistic assuptions of LV. First, primary production should be density dependent. TODO EXAMPLE</p> <p>Second consumption should follow a functional response as a function of resource density. TODO EXAMPLE</p> <p>Why are CR models of interest? Stability of systems. </p> <p></p> <p></p>"},{"location":"tutorials/two_species/#lotka-volterra","title":"Lotka-Volterra","text":"<p>It's included. Just like in previous tutorial we can use the constructor to create an instance of the Lotka-Volterra model:</p> <p>```@example 2 lv = TrophicLotkaVolterra() <pre><code>and convert it to a `Problem` and `simulate`, just as we did before\n\n\n```@example 3\nprob = problem(lv)\ntraj = simulate(prob)\n</code></pre></p> <p>LV and parameterizations. Introduce limit cycles. </p> <p></p> <p></p>"},{"location":"tutorials/two_species/#what-is-a-functional-response","title":"What is a functional response?","text":"<p>Here we build a new model with our own customized functional response.</p> <p>How the rate of consumption of consumer $C$ of a resource $R$ depends on the density of the resource. This idea was initially described by Holling (YEAR).</p> <p>The Lotka-Voltera Model has a linear (or also-called Holling Type-I) functional response. Consider the time-derivative of the consumer $C$:</p> <p>$$ \\frac{dC}{dt} = \\beta CR - \\gamma C $$</p> <p>i.e., for a fixed number of consumers $C$, the transfer of biomass from resource  to consumer is a linear function of the resource amount $R$ as a  function with slope $\\beta$.  </p> <p>This is not realistic. simple example.</p>"}]}