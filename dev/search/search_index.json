{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#ecodynamicsjl","title":"EcoDynamics.jl","text":""},{"location":"getting_started/design/","title":"Package design","text":"<p>What is the type system?</p>"},{"location":"getting_started/hello_world/","title":"Hello World","text":""},{"location":"getting_started/hello_world/#hello-world-in-ecodynamicsjl","title":"Hello World in <code>EcoDynamics.jl</code>","text":"<pre><code>sg = SpatialGraph()\n</code></pre>"},{"location":"lib/internal/","title":"Internal","text":""},{"location":"lib/internal/#documentation-for-internal-methods","title":"Documentation for internal methods","text":"<p># <code>Base.size</code> \u2014 Method.</p> <pre><code>Base.size(sg::SpatialGraph)\n</code></pre> <p>Returns the number of nodes in a spatial graph <code>sg</code>.</p> <p>source</p> <p># <code>MetacommunityDynamics._env_from_layer</code> \u2014 Method.</p> <pre><code>_env_from_layer(coords, layer::EnvironmentLayer)\n</code></pre> <p>Returns the values in the layer at the given coordinates, given the bounding-box os the coordinates is the extent of the layer.</p> <p>source</p> <p># <code>MetacommunityDynamics.distance_matrix</code> \u2014 Method.</p> <pre><code>distance_matrix(sg::SpatialGraph; distance = Euclidean())\n</code></pre> <p>Returns a matrix of pairwise distances for all nodes in a <code>SpatialGraph</code>. The argument passed to <code>distance</code> must be of type <code>Distance</code> from <code>Distances.jl</code>.</p> <p>source</p> <p># <code>MetacommunityDynamics.factory</code> \u2014 Method.</p> <pre><code>factory(bh::BevertonHolt)\n</code></pre> <p>Model factory for the Beverton-Holt model. Returns a function that takes a state <code>u</code> and returns an anonymous function and returns <code>du</code>. </p> <p>source</p> <p># <code>MetacommunityDynamics.\u2202u</code> \u2014 Method.</p> <pre><code>\u2202u(bm::BevertonHolt, x)\n</code></pre> <p>Single time-step for the <code>BevertonHolt</code> model. </p> <p>source</p>"},{"location":"lib/public/","title":"Public","text":""},{"location":"lib/public/#public-methods","title":"Public methods","text":"<p># <code>MetacommunityDynamics.BevertonHolt</code> \u2014 Type.</p> <pre><code>BevertonHolt &lt;: Model\n</code></pre> <p>The Beverton-Holt model is a discrete-time, deterministic model of population dynamics. It is commonly interpreted as a discrete-time version of the logistic model.  </p> <p>source</p> <p># <code>MetacommunityDynamics.DispersalPotential</code> \u2014 Type.</p> <pre><code>DispersalPotential\n</code></pre> <p>A dispersal potential is a matrix that contains the pairwise  probability of dispersal between sites in an <code>AbstractSpace</code>.</p> <p>Note this is a doubly-stochastic matrix, meaning all rows  and columns sum to 0.  </p> <p>source</p> <p># <code>MetacommunityDynamics.EnvironmentLayer</code> \u2014 Type.</p> <pre><code>EnvironmentLayer{T}\n</code></pre> <p>An <code>EnvironmentalLayer</code> stores a raster representation of a single environmental variable inside a matrix.</p> <p>source</p> <p># <code>MetacommunityDynamics.EnvironmentLayer</code> \u2014 Method.</p> <pre><code>EnvironmentLayer(; generator = MidpointDisplacement(0.7), sz=(50,50))\n</code></pre> <p>Builds an <code>EnvironmentalLayer</code> with a <code>NeutralLandscapes</code> generator</p> <p>source</p> <p># <code>MetacommunityDynamics.SpatialGraph</code> \u2014 Type.</p> <pre><code>SpatialGraph{T &lt;: Number}\n</code></pre> <p>A <code>SpatialGraph</code> consists of a set of nodes with coordinates and associated environmental variables for each node.</p> <p>Specific information about the edges in a <code>SpatialGraph</code> (which represent movement between nodes) is not stored here, as they tend to rely on species-specific parameters. As such, that are computed by combining a <code>SpatialGraph</code> with a  <code>DispersalKernel</code> to create a <code>DispersalPotential</code>.  </p> <p>source</p> <p>&lt;a id='MetacommunityDynamics.SpatialGraph-Tuple{E} where E&lt;:EnvironmentLayer' href='#MetacommunityDynamics.SpatialGraph-Tuple{E} where E&lt;:EnvironmentLayer'&gt;# <code>MetacommunityDynamics.SpatialGraph</code> \u2014 Method.</p> <pre><code>SpatialGraph(layer::E; coords = [(rand(), rand()) for _ = 1:20]) where E&lt;:EnvironmentLayer\n</code></pre> <p>Builds a <code>SpatialGraph</code> where the environmental variable is built from a single EnvironmentLayer, and optionally the set of coordinates can be passed as a keyword argument.</p> <p>source</p> <p># <code>MetacommunityDynamics.SpatialGraph</code> \u2014 Method.</p> <pre><code>SpatialGraph(n::Integer)\n</code></pre> <p>Builds a spatial graph with <code>n</code> nodes in it.</p> <p>source</p> <p># <code>MetacommunityDynamics.SpatialGraph</code> \u2014 Method.</p> <pre><code>SpatialGraph(n::Integer)\n</code></pre> <p>Builds a spatial graph for a given environment matrix. The environmental matrix should be a matrix where each column is the vector of environmental variables for each node.</p> <p>source</p> <p># <code>MetacommunityDynamics.SpatialGraph</code> \u2014 Method.</p> <pre><code>SpatialGraph(; coords = nothing, env = nothing)\n</code></pre> <p>Builds a <code>SpatialGraph</code>, where both the coordinates and the environmental variables can be passed as keyword arguments. The environmental matrix should be a matrix where each column is the vector of environmental variables for each node.</p> <p>source</p> <p>&lt;a id='MetacommunityDynamics.SpatialGraph-Union{Tuple{Vector{E}}, Tuple{E}} where E&lt;:EnvironmentLayer' href='#MetacommunityDynamics.SpatialGraph-Union{Tuple{Vector{E}}, Tuple{E}} where E&lt;:EnvironmentLayer'&gt;# <code>MetacommunityDynamics.SpatialGraph</code> \u2014 Method.</p> <pre><code>SpatialGraph(layers::Vector{E}; coords = [(rand(), rand()) for _ = 1:20]) where E&lt;:EnvironmentLayer\n</code></pre> <p>Builds a spatial graph with environmental variables passed as a vector of EnvironmentLayers, and optionally coordinates passed as a keyword argument. </p> <p>source</p> <p>&lt;a id='MetacommunityDynamics.SpatialGraph-Union{Tuple{Vector{T}}, Tuple{T}} where T&lt;:Tuple' href='#MetacommunityDynamics.SpatialGraph-Union{Tuple{Vector{T}}, Tuple{T}} where T&lt;:Tuple'&gt;# <code>MetacommunityDynamics.SpatialGraph</code> \u2014 Method.</p> <pre><code>SpatialGraph(coords::Vector{T}; num_envdims=5) where T&lt;:Tuple\n</code></pre> <p>Constructs a <code>SpatialGraph</code> from a set of coordinates <code>coords</code>, which is a vector of (x,y) pairs. Builds a random environment matrix, with the optional keyword argument <code>num_envdims</code> controlling the dimensionality of the envrionmental variables at each node. </p> <p>source</p> <p># <code>MetacommunityDynamics.SpeciesPool</code> \u2014 Type.</p> <pre><code>SpeciesPool{T&lt;:Number}\n</code></pre> <p>A <code>SpeciesPool</code> consists of a set of species and their corresponding traits. </p> <p>source</p> <p># <code>MetacommunityDynamics.envdims</code> \u2014 Method.</p> <pre><code>envdims(sg::SpatialGraph)\n</code></pre> <p>Returns the dimensionality of the environmental variable associated with each node in a <code>SpatialGraph</code> sg.</p> <p>source</p> <p># <code>MetacommunityDynamics.environment</code> \u2014 Method.</p> <pre><code>environment(sg::SpatialGraph)\n</code></pre> <p>Returns the matrix of environmental variables of a <code>SpatialGraph</code> <code>sg</code></p> <p>source</p> <p># <code>MetacommunityDynamics.numsites</code> \u2014 Method.</p> <pre><code>numsites(sg::SpatialGraph)\n</code></pre> <p>Returns the number of nodes in a <code>SpatialGraph</code> <code>sg</code>. </p> <p>source</p>"}]}