{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#ecodynamicsjl","title":"EcoDynamics.jl","text":"<p>EcoDynamics.jl is a package for simulation of ecosystem processes, specifically population and community dynamics on spatial graphs, written in the Julia language.</p>"},{"location":"examples/community_inference/","title":"Bayesian Inference of community dynamics using Turing.jl","text":""},{"location":"examples/community_inference/#inferring-community-dynamics","title":"Inferring community dynamics","text":"<p>This use case shows how to build and run a model of community dynamics (the Rosenzweig-MacArthur model, specifically).</p> <pre><code>using Turing, DiffEqBayes\nusing DifferentialEquations\nusing MetacommunityDynamics\nusing LinearAlgebra\nusing CairoMakie\n</code></pre> <pre><code>\u250c Warning: Environment variable CMDSTAN_HOME not set. Use set_cmdstan_home!.\n\u2514 @ StanBase ~/.julia/packages/StanBase/EKgLz/src/StanBase.jl:52\n</code></pre> <p>The Rosenzweig-MacArthur model is a model of consumer-resource dynamics. </p> <p>It is described by the equations </p> <p>$$ \\frac{dR}{dt} = \\lambda R \\bigg(1 - \\frac{R}{K}\\bigg) - \\frac{\\alpha CR}{1 +\\alpha \\eta R} $$</p> <p>$$ \\frac{dC}{dt} = \\beta \\frac{\\alpha CR}{1 + \\alpha \\eta R} - \\gamma   C $$</p> <p>where $R$ is the relative biomass of the resource, $C$ is the relative biomass of the consumer, $\\alpha$ is the attack-rate, $\\eta$ is the handling type, $\\lambda$ is the maximum instric growth rate,  $\\beta$ is the intrinsic infintesimal growth of biomass for the consumer per unit resource, and $\\gamma$ is the intrinsic death date of consumers. Note that this is equivalent to a Lotka-Volterra model with a Holling Type-II functional response. </p> <p>Let's simulate it ,using only 3 lines of Julia. </p> <p>First we build the model</p> <pre><code>rm = RosenzweigMacArthur()\n</code></pre> <pre><code>RosenzweigMacArthur{Local}(Parameter{Int64, Matrix{Int64}}([0 1; 0 0]), Parameter{Float64, Vector{Float64}}([0.0, 0.5]), Parameter{Float64, Matrix{Float64}}([0.0 5.0; 5.0 0.0]), Parameter{Float64, Matrix{Float64}}([0.0 3.0; 3.0 0.0]), Parameter{Float64, Matrix{Float64}}([0.0 0.5; 0.5 0.0]), Parameter{Float64, Vector{Float64}}([0.1, 0.0]), Parameter{Float64, Vector{Float64}}([0.0, 0.3]))\n</code></pre> <p>Then we setup the problem</p> <p>```@example 1 prob = problem(rm, Deterministic) <pre><code>Third we simulate!\n\n\n```@example 1\ntraj = simulate(prob)\n</code></pre></p> <p>```@example 1 obs = observe(Observer(frequency=1), traj) <pre><code>&lt;a id='Inference'&gt;&lt;/a&gt;\n\n&lt;a id='Inference-1'&gt;&lt;/a&gt;\n\n## Inference\n\n\nFirst we define our model for inference.\n\n\n```@example 1\nprint(\"Fitting model...\")\n@model function fit_rm(data, prob)\n    \u03c3 ~ InverseGamma(2,3)\n    \u03bb ~ TruncatedNormal(0.5,1, 0,1.5)\n    \u03b1 ~ Normal(2,3.)\n    \u03b7 ~ Normal(2,3.)\n    \u03b2 ~ TruncatedNormal(0.5,1,0,1.5)\n    \u03b3 ~ TruncatedNormal(0.5,1,0,1.5)\n    K ~ TruncatedNormal(0.5,1,0,1.5)\n\n    \u03b8 = two_species(RosenzweigMacArthur, \u03bb=\u03bb, \u03b1=\u03b1, \u03b7=\u03b7, \u03b2=\u03b2, \u03b3=\u03b3, K=K)\n    predicted = solve(prob, Tsit5(); p=\u03b8, saveat=1)\n\n    for i in eachindex(predicted)\n        data[:,i] ~ MvNormal(predicted[i], \u03c3^2 * I)\n    end\nend\nmodel = fit_rm(obs, prob.prob)\nchain = sample(model, NUTS(0.65), MCMCSerial(), 300, 1)\nposterior_samples = sample(chain[[:\u03bb, :\u03b1, :\u03b7, :\u03b2, :\u03b3, :K]], 300)\nf = Figure()\nax = Axis(f[1,1], xlabel=\"Time\", ylabel=\"Biomass\")\nxlims!(0,100)\nfor p in eachrow(Array(posterior_samples))\n    \u03bb, \u03b1, \u03b7, \u03b2, \u03b3, K =  p\n    \u03b8 = two_species(RosenzweigMacArthur, \u03bb=\u03bb, \u03b1=\u03b1, \u03b7=\u03b7, \u03b2=\u03b2, \u03b3=\u03b3, K=K)\n\n    sol_p = solve(prob.prob, Tsit5(); p=\u03b8, saveat=1)\n\n    lines!(ax, sol_p.t, [sol_p.u[i][1] for i in eachindex(sol_p.t)], color=(:lightskyblue1, 0.1))\n    lines!(ax, sol_p.t, [sol_p.u[i][2] for i in eachindex(sol_p.t)], color=(:lightcoral, 0.04))\nend\nscatter!(ax, 1:size(obs,2), obs[1,:], color=(:dodgerblue))\nscatter!(ax, 1:size(obs,2), obs[2,:], color=(:red, 0.5))\nf\n</code></pre></p>"},{"location":"getting_started/design/","title":"Package design","text":""},{"location":"getting_started/design/#the-design-of-ecodynamicsjl","title":"The design of <code>EcoDynamics.jl</code>","text":"<p>This document is for advanced users interested in contributing new models or building complicated custom models in <code>EcoDynamics.jl</code>.</p> <p></p> <p></p>"},{"location":"getting_started/design/#the-type-system","title":"The type system","text":"<p>While EcoDynamics enables simulation of dynamics in a single place (locally), it's main goal is to enable reaction-diffusion models on spatial graphs. Similarly, although EcoDynamics is perfectly adaquete for simulating the dynamics of single-species systems, the core design goals are motivated by an interest in simulating communities on spatial graphs, where environmental variation across each patch/node in the graph influences the dynamics at that node/patch, with a particular emphasis on understanding how different levels of neutral, niche, and dispersal processes drive regime shifts in resulting species compositions across space. </p> <p>What are the essential things you need to build a simulation model that meets this criteria?</p> <ol> <li>We need a way to represent different types of models (e.g. Lotka-Volterra, Rosenzweig-MacArthur, etc).</li> <li>A spatial graph, consisting of a set of nodes/patches connected by dispersal, that also can represent environmental information associated with each patch.</li> <li>A species pool with traits, which are an arbitrary set of named values that correspond to each species in the species pool.</li> <li>The niche, where the combination of the local (named!) environmental conditions at a patch and other species present shifts the parameters of the dynamics at that patch.</li> </ol> <p>Note that all are interconnected and must interface with one another to achieve our overall goal:</p> <ul> <li>the model's parameters must match species pool size and number of spatial sites  (1-&gt;2, 1-&gt;3)</li> <li>the spatial graph must provide environmental data for the niche (2 -&gt; 4)</li> <li>the species pool must provide traits for the niche (3-&gt;4)</li> <li>the niche must provide parameters for the spatial version of the model based on the species pool and (spatial graph w/ environment) (2-&gt;1, 4-&gt;1)</li> <li>both the species and environment must provide named parameters to the niche (2-&gt;4,3-&gt;4)</li> </ul> <p></p> <p></p>"},{"location":"getting_started/design/#models","title":"Models","text":"<p>The first element of the type system is distinguishing different properties of different <code>Model</code>s. In EcoDynamics.jl, <code>Model</code> is the abstract type under which all concrete model definitions are subtyped. Specifically, <code>Model</code> is defined as a parameteric abstract type where stores information about the important meta-properties about models. </p> <p><code>abstract type Model{SC&lt;:Scale,M&lt;:Measurement,SP&lt;:Spatialness,D&lt;:Discreteness} end</code> </p> <p>Specifically there are four different important properties which <code>Model</code> stores (in Julia development, this design pattern is called using 'traits', although we refrain from using that terminology in this documentation to avoid confusion with <code>Trait</code>s as the type of information that describes properties about species).</p> <p>These four properties are <code>Scale</code>, <code>Measurement</code>, <code>Spatialness</code>, and <code>Discreteness</code>. Each of these are defined as abstract types, and the different values they can take on are defined as abstract types that are subtypes of the category they correspond to.</p> <ol> <li><code>Scale</code> refers to the organizational scale a model is originally designed, with the options being <code>Population</code>, <code>Community</code>, <code>Metapopulation</code>, and <code>Metacommunity</code>. Note that a model being at the <code>Population</code> and <code>Community</code> scale doesn't preclude it from being turned into reaction-diffusion models on spatial graphs, however <code>Metapopulation</code> and <code>Metacommunity</code> models are such that they have no corresponding local version (think Hanksi's metapopulation model).</li> <li><code>Measurement</code> refers to the type of information that is changing over time in a given model. There options here are (1) <code>Occupancy</code>, which indicates binary presence/absence state, (2) <code>Abundance</code>, where each state is a non-negative integer representing the count of individuals and (3) <code>Biomass</code>, where each state is a non-negative real number indicating some relative measure of biomass.</li> <li><code>Discreteness</code> refers to whether a model is defined in <code>Continuous</code> or <code>Discrete</code> time.</li> <li><code>Spatialness</code> refers to whether a constructed model is only occuring at a single location (<code>Local</code>), or whether the model is constructed across a spatial graph (<code>Spatial</code>). This type-parameter is distinct because it can change. The method <code>spatialize</code> transforms a <code>Local</code> model into spatial models.</li> </ol> <p></p> <p></p>"},{"location":"getting_started/design/#parameters","title":"Parameters","text":"<p>Each field of a <code>Model</code> is a subtype of the abstract type <code>Parameter</code>. For now, parameters are either of the type <code>SpeciesSpecificParameter</code> (where a parameter has a scalar value for each species and location), or <code>PairwiseParameter</code> (where there is a scalar value for each unique pairwise combination of species and location). For now, <code>EcoDynamics</code> does not support model for higher-order interactions, although it is a future goal to build upon <code>PairwiseParameter</code>s to support an arbitrarily number of higher order effects. </p> <p></p> <p></p>"},{"location":"getting_started/design/#spatial-graphs","title":"Spatial graphs","text":"<p>The <code>SpatialGraph</code> type contains information about the coordinates of each patch/node, as well as environmental covariates at each site. Environmental covariates are stored in a dictionary where the key is the name of the variable, and the value is a vector of values corresponds to each node in the spatial graph. </p> <p></p> <p></p>"},{"location":"getting_started/design/#species-pool","title":"Species Pool","text":"<p>Traits are a dict, just like environment is a dict.</p> <p></p> <p></p>"},{"location":"getting_started/design/#niches","title":"Niches","text":"<ul> <li>Provide a default niche function for each model, but enable it to be written custom. This enables environment-contigent interaction strengths, etc.</li> <li>Generally, the default niche will modify the growth rates in a model by a a function of the distance between a single dimensional environmental variable and a species trait, e.g. adjusting $R_0$ in the SIR model</li> </ul>"},{"location":"getting_started/design/#dispatch-patterns","title":"Dispatch patterns","text":"<ul> <li>What is the lifespan of building and running a model?</li> <li>Maybe there is a figure for the paper here, flowchart of what is the next method you run based on what you are trying to do?</li> </ul>"},{"location":"getting_started/design/#qa-methods-for-included-models","title":"QA Methods for Included Models","text":"<p>One main design goal of <code>EcoDynamics.jl</code> is to ensure it is as easy as possible to write customs models. \"Easy\", in this sense, means both involving writing the fewest lines of code possible, and not requiring a deep understanding of Julia or its type system. </p> <p>This means that the instructions on how to add custom models (see TBD docs section) doesn't include some of the extra methods added to included models to avoid possible mistakes. E.g.:</p> <ul> <li>Warnings about parameter values that are extreme or nonsensical (providing an intrinsic growth rate to a predator in a LV model, say)</li> <li>Warnings about whether a niche function leads toward \"crucial\" parameters going to 0/unreasonable values at most sites depending on the range of environmnetal variables provided in the SpatialGraph</li> </ul>"},{"location":"getting_started/hello_world/","title":"Hello World","text":""},{"location":"getting_started/hello_world/#hello-world-in-ecodynamicsjl","title":"Hello World in <code>EcoDynamics.jl</code>","text":"<p>Okay</p> <pre><code>using MetacommunityDynamics\nsg = SpatialGraph()\n</code></pre> <pre><code>A spatial graph with 20 locations.\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   1\u2502\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2502\n    \u2502\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u26ac\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u26ac\u2800\u2800\u2800\u2502\n    \u2502\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u26ac\u2800\u2800\u2800\u2502\n    \u2502\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2502\n    \u2502\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u26ac\u2502\n    \u2502\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u26ac\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u26ac\u2800\u2800\u2800\u2800\u26ac\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2502\n    \u2502\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u26ac\u2800\u2800\u26ac\u2800\u2502\n    \u2502\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u26ac\u2800\u2800\u2800\u26ac\u2800\u2800\u2800\u2800\u2800\u2800\u2502\n    \u2502\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u26ac\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2502\n    \u2502\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u26ac\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2502\n    \u2502\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u26ac\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2502\n    \u2502\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2502\n    \u2502\u2800\u2800\u2800\u26ac\u2800\u26ac\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u26ac\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2502\n    \u2502\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u26ac\u2502\n   0\u2502\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u26ac\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u26ac\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n    \u28000\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28001\u2800\n</code></pre>"},{"location":"lib/internal/","title":"Internal","text":""},{"location":"lib/internal/#documentation-for-internal-methods","title":"Documentation for internal methods","text":"<p># <code>Base.size</code> \u2014 Method.</p> <pre><code>Base.size(sg::SpatialGraph)\n</code></pre> <p>Returns the number of nodes in a spatial graph <code>sg</code>.</p> <p>source</p> <p># <code>MetacommunityDynamics._env_from_layer</code> \u2014 Method.</p> <pre><code>_env_from_layer(coords, layer::EnvironmentLayer)\n</code></pre> <p>Returns the values in the layer at the given coordinates, given the bounding-box os the coordinates is the extent of the layer.</p> <p>source</p> <p># <code>MetacommunityDynamics.distance_matrix</code> \u2014 Method.</p> <pre><code>distance_matrix(sg::SpatialGraph; distance = Euclidean())\n</code></pre> <p>Returns a matrix of pairwise distances for all nodes in a <code>SpatialGraph</code>. The argument passed to <code>distance</code> must be of type <code>Distance</code> from <code>Distances.jl</code>.</p> <p>source</p> <p># <code>MetacommunityDynamics.\u2202u</code> \u2014 Method.</p> <pre><code>\u2202u(bm::BevertonHolt, x)\n</code></pre> <p>Single time-step for the <code>BevertonHolt</code> model. </p> <p>source</p>"},{"location":"lib/public/","title":"Public","text":""},{"location":"lib/public/#public-methods","title":"Public methods","text":"<p># <code>MetacommunityDynamics.BevertonHolt</code> \u2014 Type.</p> <pre><code>BevertonHolt &lt;: Model\n</code></pre> <p>The Beverton-Holt model is a discrete-time, deterministic model of population dynamics. It is commonly interpreted as a discrete-time version of the logistic model.</p> <p>It is described by </p> <p>$N_{t+1} =\\frac{R_0 M}{N_t + M}N_t$</p> <p>where $K = (R_0 - 1)M$ is the carrying capacity.</p> <p>source</p> <p># <code>MetacommunityDynamics.DispersalPotential</code> \u2014 Type.</p> <pre><code>DispersalPotential\n</code></pre> <p>A dispersal potential is a matrix that contains the pairwise  probability of dispersal between sites in an <code>AbstractSpace</code>.</p> <p>Note this is a doubly-stochastic matrix, meaning all rows  and columns sum to 0.  </p> <p>source</p> <p># <code>MetacommunityDynamics.EnvironmentLayer</code> \u2014 Type.</p> <pre><code>EnvironmentLayer{T}\n</code></pre> <p>An <code>EnvironmentalLayer</code> stores a raster representation of a single environmental variable inside a matrix.</p> <p>source</p> <p># <code>MetacommunityDynamics.EnvironmentLayer</code> \u2014 Method.</p> <pre><code>EnvironmentLayer(; generator = MidpointDisplacement(0.7), sz=(50,50))\n</code></pre> <p>Builds an <code>EnvironmentalLayer</code> with a <code>NeutralLandscapes</code> generator</p> <p>source</p> <p># <code>MetacommunityDynamics.RosenzweigMacArthur</code> \u2014 Type.</p> <pre><code>struct RosenzweigMacArthur{S,T&lt;:Number} &lt;: Model\n</code></pre> <p>Dynamics given by</p> <p>$\\frac{dR}{dt} = \\lambda R \\bigg(1 - \\frac{R}{K}\\bigg) - \\frac{\\alpha CR}{1 +\\alpha \\eta R}$</p> <p>$\\frac{dC}{dt} = \\beta \\frac{\\alpha CR}{1 + \\alpha \\eta R} - \\gamma   C$</p> <p>source</p> <p># <code>MetacommunityDynamics.SpatialGraph</code> \u2014 Type.</p> <pre><code>SpatialGraph{T &lt;: Number}\n</code></pre> <p>A <code>SpatialGraph</code> consists of a set of nodes with coordinates and associated environmental variables for each node.</p> <p>Specific information about the edges in a <code>SpatialGraph</code> (which represent movement between nodes) is not stored here, as they tend to rely on species-specific parameters. As such, that are computed by combining a <code>SpatialGraph</code> with a  <code>DispersalKernel</code> to create a <code>DispersalPotential</code>.  </p> <p>source</p> <p>&lt;a id='MetacommunityDynamics.SpatialGraph-Tuple{E} where E&lt;:EnvironmentLayer' href='#MetacommunityDynamics.SpatialGraph-Tuple{E} where E&lt;:EnvironmentLayer'&gt;# <code>MetacommunityDynamics.SpatialGraph</code> \u2014 Method.</p> <pre><code>SpatialGraph(layer::E; coords = [(rand(), rand()) for _ = 1:20]) where E&lt;:EnvironmentLayer\n</code></pre> <p>Builds a <code>SpatialGraph</code> where the environmental variable is built from a single EnvironmentLayer, and optionally the set of coordinates can be passed as a keyword argument.</p> <p>source</p> <p># <code>MetacommunityDynamics.SpatialGraph</code> \u2014 Method.</p> <pre><code>SpatialGraph(n::Integer)\n</code></pre> <p>Builds a spatial graph with <code>n</code> nodes in it.</p> <p>source</p> <p># <code>MetacommunityDynamics.SpatialGraph</code> \u2014 Method.</p> <pre><code>SpatialGraph(; coords = nothing, env = nothing)\n</code></pre> <p>Builds a <code>SpatialGraph</code>, where both the coordinates and the environmental variables can be passed as keyword arguments. The environment should be a dictionary where (key,value) pairs are names of each environmnetal variable and vectors of that variable across each node in the <code>SpatialGraph</code>.</p> <p>source</p> <p>&lt;a id='MetacommunityDynamics.SpatialGraph-Union{Tuple{Dict{S, Vector{T}}}, Tuple{T}, Tuple{S}} where {S&lt;:Union{String, Symbol}, T}' href='#MetacommunityDynamics.SpatialGraph-Union{Tuple{Dict{S, Vector{T}}}, Tuple{T}, Tuple{S}} where {S&lt;:Union{String, Symbol}, T}'&gt;# <code>MetacommunityDynamics.SpatialGraph</code> \u2014 Method.</p> <pre><code>SpatialGraph(env::Dict{S,Vector})\n</code></pre> <p>Builds a spatial graph for a given environment matrix. The environmental matrix should be a matrix where each column is the vector of environmental variables for each node.</p> <p>source</p> <p>&lt;a id='MetacommunityDynamics.SpatialGraph-Union{Tuple{Vector{E}}, Tuple{E}} where E&lt;:EnvironmentLayer' href='#MetacommunityDynamics.SpatialGraph-Union{Tuple{Vector{E}}, Tuple{E}} where E&lt;:EnvironmentLayer'&gt;# <code>MetacommunityDynamics.SpatialGraph</code> \u2014 Method.</p> <pre><code>SpatialGraph(layers::Vector{E}; coords = [(rand(), rand()) for _ = 1:20]) where E&lt;:EnvironmentLayer\n</code></pre> <p>Builds a spatial graph with environmental variables passed as a vector of EnvironmentLayers, and optionally coordinates passed as a keyword argument. </p> <p>source</p> <p>&lt;a id='MetacommunityDynamics.SpatialGraph-Union{Tuple{Vector{T}}, Tuple{T}} where T&lt;:Tuple' href='#MetacommunityDynamics.SpatialGraph-Union{Tuple{Vector{T}}, Tuple{T}} where T&lt;:Tuple'&gt;# <code>MetacommunityDynamics.SpatialGraph</code> \u2014 Method.</p> <pre><code>SpatialGraph(coords::Vector{T}) where T&lt;:Tuple\n</code></pre> <p>Constructs a <code>SpatialGraph</code> from a set of coordinates <code>coords</code>, which is a vector of (x,y) pairs. Builds a random environment variable named :x.</p> <p>source</p> <p># <code>MetacommunityDynamics.SpeciesPool</code> \u2014 Type.</p> <pre><code>SpeciesPool{T&lt;:Number}\n</code></pre> <p>A <code>SpeciesPool</code> consists of a set of species and their corresponding traits. </p> <p>source</p> <p># <code>MetacommunityDynamics.Trajectory</code> \u2014 Type.</p> <pre><code>Trajectory{S&lt;:SciMLBase.AbstractTimeseriesSolution}\n</code></pre> <p>A trajectory is a single output for a <code>Problem</code>.  </p> <p>source</p> <p># <code>MetacommunityDynamics.envdims</code> \u2014 Method.</p> <pre><code>envdims(sg::SpatialGraph)\n</code></pre> <p>Returns the dimensionality of the environmental variable associated with each node in a <code>SpatialGraph</code> sg.</p> <p>source</p> <p># <code>MetacommunityDynamics.environment</code> \u2014 Method.</p> <pre><code>environment(sg::SpatialGraph)\n</code></pre> <p>Returns the matrix of environmental variables of a <code>SpatialGraph</code> <code>sg</code></p> <p>source</p> <p># <code>MetacommunityDynamics.numsites</code> \u2014 Method.</p> <pre><code>numsites(sg::SpatialGraph)\n</code></pre> <p>Returns the number of nodes in a <code>SpatialGraph</code> <code>sg</code>. </p> <p>source</p>"},{"location":"model_index/community/overview/","title":"Overview","text":""},{"location":"model_index/community/overview/#community-dynamics-in-ecodynamicsjl","title":"Community Dynamics in EcoDynamics.jl","text":"<p>The dynamics of ecological communities has a rich history. </p>"},{"location":"model_index/metapopulation/overview/","title":"Overview","text":""},{"location":"model_index/metapopulation/overview/#metapopulation-dynamics-in-ecodynamicsjl","title":"Metapopulation Dynamics in EcoDynamics.jl","text":"<p>Metapopulation dynamics refers to the set of theory describing the behavior of occupancy dynamics in a set of patches. </p>"},{"location":"model_index/population/overview/","title":"Overview","text":""},{"location":"model_index/population/overview/#population-dynamics-in-ecodynamicsjl","title":"Population Dynamics in EcoDynamics.jl","text":""},{"location":"model_index/population/overview/#beverton-holt","title":"Beverton-Holt","text":"<p><code>@doc BevertonHolt</code></p>"}]}